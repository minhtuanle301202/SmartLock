#include <SoftwareSerial.h> // Thư viện cho cổng nối tiếp mềm
#include<Servo.h> 
#include<SPI.h>
#include<MFRC522.h>
#include <Keypad.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2); 

#define RX_PIN A3 // Chân RX của cổng nối tiếp mềm
#define TX_PIN A4 // Chân TX của cổng nối tiếp mềm
SoftwareSerial mySerial(RX_PIN, TX_PIN); 


int servo = A0 ;
Servo myServo ; 
const byte ROWS = 4; // 4 hàng  trong bàn phím
const byte COLS = 4; // 4 cột trong bàn phím

// ma trận bàn phím
char hexaKeys[ROWS][COLS] = {
   {'1', '2', '3','A'},
   {'4', '5', '6','B'},
   {'7', '8', '9','C'},
   {'*', '0', '#','D'}
};
byte rowPins[ROWS] = {7, 6, 5, 4}; // Chân của các hàng
byte colPins[COLS] = {3, 2, A1, A2}; // Chân của các hàng

#define RST_PIN 9  
#define SS_PIN 10
MFRC522 mfrc522(SS_PIN,RST_PIN) ;

byte UID1[4] = {0x73,0x37,0x97,0x2F} ; 
byte UID2[4] = {0x63,0x4D,0x08,0xF7} ; 
byte UID[4] ;

Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); 
char customKey ;

char passWord[6] = "1234" ; // Mật khẩu
char initial_password[6],new_password[6];
int flag = 0 ; 
int signal_changepass = 0 ;
int signal_typecard = 0 ;
int signal_typeapp  = 0; 
// Trạng thái ban đầu
void init_stage() {
  lcd.clear(); 
  String str1 = "Enter PassWord" ; 
  int startPosition = (16-str1.length())/2 ;
  lcd.setCursor(startPosition,0) ; 
  lcd.print(str1) ;  
  String str2 = "[____]" ;
  startPosition = (16-str2.length())/2 ;
  lcd.setCursor(startPosition,1) ;
  lcd.print(str2) ; 
  return ;
}

// Trạng thái nhập mật khẩu
// void type_pass() {
//    String str2 = "[____]" ;
//  int startPosition = (16-str2.length())/2 ;
//   lcd.setCursor(startPosition,1) ;
//   int j = 0;
//   while(j<4) {
//     char key = customKeypad.getKey() ;
//     if(key) {
//        initial_password[j++] = key;
//      lcd.setCursor(++startPosition,1) ;
//      lcd.print("*") ; 
//     }
    
//   }
//      delay(500) ;
//   Serial.println(initial_password) ;
//   Serial.println(passWord) ;
//   if(strcmp(initial_password,passWord)) {
//      lcd.clear() ;
//     String str3 = "Wrong PassWord" ;
//     startPosition = (16-str3.length())/2 ; 
//     lcd.setCursor(startPosition,0) ;
//     lcd.print(str3) ; 
//      str3 = "Try Again" ;
//     startPosition = (16-str3.length())/2 ; 
//     lcd.setCursor(startPosition,1) ;
//     lcd.print(str3) ; 
//     delay(2000);
//   }
//   else {
 
//     open_door() ;
//   }
//   init_stage() ; 
// }

// Trạng thái khi mở cửa
void open_door() {
    lcd.clear() ;
    String str1 = "Pass Accepted" ;
    int startPosition = (16-str1.length())/2 ;
    lcd.setCursor(startPosition,0) ;
    lcd.print(str1) ;
    
    String str2 = "Opened Door" ;
    startPosition = (16-str2.length())/2 ;
    lcd.setCursor(startPosition,1) ;
    lcd.print(str2) ;
    // digitalWrite(led,HIGH) ; 
    myServo.write(100); 
    delay(4000) ;
    myServo.write(-100);
    delay(500) ;
    init_stage() ;  
}


// Nhập mật khẩu cũ để thay đổi mật khẩu
void current_pass(String str) {
  lcd.clear() ;
  String str1 = str ;
  int startPosition = (16-str1.length())/2 ; 
  lcd.setCursor(startPosition,0) ;
  lcd.print(str1) ;
  String str2 = "[____]" ;
  startPosition = (16-str2.length())/2 ;
  lcd.setCursor(startPosition,1) ;
  lcd.print(str2) ;
  startPosition = (16-str2.length())/2 ;
  lcd.setCursor(startPosition,1) ; 
  
  int j = 0;
  while(j<4) {
    char key = customKeypad.getKey() ;
    if(key) {
      if(key != '#' && key != '*' && key != 'A') {
     new_password[j++] = key;
     lcd.setCursor(++startPosition,1) ;
     lcd.print("*") ; 
     }
     else if(key == '#'){
       signal_changepass = 1;
       return ;
     }
     else if(key == '*') {
      signal_typecard = 1 ;
      return ;
     }
     else if(key == 'A') {
      signal_typeapp = 1 ;
      return ; 
     }
    }
    
     
  }
}

// Trạng thái khi nhập sai mật khẩu cũ
void current_pass_wrong() {

    boolean wrongPass = false;
  for (int i = 0; i < 4; i++) {
    if (new_password[i] != passWord[i]) {
      wrongPass = true;
      break;
    }
  }

   if(wrongPass) {
      lcd.clear() ;
  String str1 = "Wrong PassWord" ; 
  int startPosition = (16-str1.length())/2 ; 
  lcd.setCursor(startPosition,0) ; 
  lcd.print(str1) ; 
   String str2 = "Try Again" ;
  startPosition = (16-str2.length())/2 ;
  lcd.setCursor(startPosition,1) ;
  lcd.print(str2) ; 
  delay(2000);
  }
  else flag = 1 ;
}

// Đếm thời gian khi nhập sai quá số lần quy định
void time_lock(int t) {
  String time,hour,minute,second ;
  int h = t/3600;
  if(h>0) {
   t=t-h*3600 ; 
  }
  
  int m = t/60 ;
  if(m>0) {
    t=t-m*60 ;
  }
 
  int s = t ;
  lcd.clear() ;
  hour = String(h) ;
  minute = String(m) ;
  second = String(s) ; 
  if(h < 10) { 
    hour = "0" + hour ; 
  }
  if(m < 10) {
    minute = "0" + minute ; 
  }
  if(t < 10) {
    second = "0" + second ; 
  }
  time = hour + ":" + minute + ":" + second ; 
  lcd.clear() ; 
  int startPosition = (16-time.length())/2 ; 
  lcd.setCursor(startPosition,0) ; 
  lcd.print(time) ;   
  delay(1000) ; 
 } 

// Hàm thay đổi password
void change_pass() {
   flag = 0 ;
   int count = 5 ; 
  int tryNumbers = 0 ;
  while(flag==0) {
    if(tryNumbers < 2) {
     current_pass("Current PassWord") ; 
     if(signal_changepass == 1) return ; 
     delay(500) ;
     current_pass_wrong() ; 
     tryNumbers++ ; 
    }
    else {
      tryNumbers = 0 ; 
      count = 5 ;
     while(count >= 0) {
     time_lock(count) ; 
     count-- ;
     }
    }
  } 
 
  lcd.clear() ;
  String str1 = "New PassWord" ; 
  int startPosition = (16-str1.length())/2 ; 
  lcd.setCursor(startPosition,0) ; 
  lcd.print(str1) ; 
   String str2 = "[____]" ;
  startPosition = (16-str2.length())/2 ;
  lcd.setCursor(startPosition,1) ;
  lcd.print(str2) ; 
  startPosition = (16-str2.length())/2 ;
  lcd.setCursor(startPosition,1) ;

  int j = 0;
  while(j<4) {
      char key = customKeypad.getKey() ;
      if(key) {
      initial_password[j++] = key;
     lcd.setCursor(++startPosition,1) ;
     lcd.print("*") ; 
      }
    
  }
  delay(500);
  strcpy(passWord,initial_password) ; 
  lcd.clear() ; 
  str1 = "Pass Changed" ;
  startPosition = (16-str1.length())/2 ; 
  lcd.setCursor(startPosition,0) ; 
  lcd.print(str1) ; 
  delay(2000);
  init_stage() ; 
  return ;
}

// Chế độ mở khóa bằng thẻ
void check_card() {
  int signal_read_card = 0 ;
   lcd.clear() ;
   String str1 = "Welcome!" ;
   int startPosition = (16-str1.length())/2 ;
   lcd.setCursor(startPosition,0) ; 
   lcd.print(str1) ; 
   String str2 = "Put your card" ;
   startPosition = (16-str2.length())/2 ;
   lcd.setCursor(startPosition,1) ; 
   lcd.print(str2) ; 

  while(!signal_read_card) {
 
   if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
     lcd.clear() ; 
    String str3 = "Scanning" ; 
   lcd.setCursor(0,0) ; 
   lcd.print(str3) ; 
  Serial.print("UID của thẻ: ") ;
   for(byte i=0;i<mfrc522.uid.size;i++)   
   {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ?  " 0" : " ") ;
    UID[i] = mfrc522.uid.uidByte[i] ;
    Serial.print(UID[i],HEX) ;
    lcd.print(".") ; 
    delay(300) ; 
   }

   Serial.println("") ;
   signal_read_card = 1 ;
   }

  }
 

   if(strncmp(UID,UID1,4)) {
    lcd.clear() ;
    String str1 = "WRONG CARD" ;
    int startPosition = (16-str1.length())/2 ;
    lcd.setCursor(startPosition,0) ;
    lcd.print(str1) ;
    
    String str2 = "TRY AGAIN" ;
    startPosition = (16-str2.length())/2 ;
    lcd.setCursor(startPosition,1) ;
    lcd.print(str2) ;
    delay(2000) ;

   }
   else {
    lcd.clear() ;
    str1 = "CORRECT CARD" ;
    startPosition = (16-str1.length())/2 ;
    lcd.setCursor(startPosition,0) ;
    lcd.print(str1) ;
    
    str2 = "OPENED DOOR" ;
    startPosition = (16-str2.length())/2 ;
    lcd.setCursor(startPosition,1) ;
    lcd.print(str2) ;
    myServo.write(100); 
    delay(4000) ;
    myServo.write(-100);
    delay(500) ;
   }
}

// Mở cửa thông qua app 
void open_door_byapp() {
  int signal_app = 0 ;
    lcd.clear() ;
   String str1 = "Welcome!" ;
   int startPosition = (16-str1.length())/2 ;
   lcd.setCursor(startPosition,0) ; 
   lcd.print(str1) ; 
   String str2 = "Click the button" ;
   startPosition = (16-str2.length())/2 ;
   lcd.setCursor(startPosition,1) ; 
   lcd.print(str2) ;
  while(!signal_app) {
        if(mySerial.available()) {
      String str1 = mySerial.readStringUntil('\n'); // Đọc dữ liệu từ Serial cho đến khi gặp ký tự xuống dòng
     if(str1.indexOf("OPEN DOOR") >= 0) {
      open_door() ;
      Serial.println(str1) ; 
     }
     else {
      lcd.clear() ;
      Serial.println(str1) ;
       str1 = "Door is locked" ;
    startPosition = (16-str1.length())/2 ;
   lcd.setCursor(startPosition,0) ; 
   lcd.print(str1) ; 
    str2 = "Try Again" ;
   startPosition = (16-str2.length())/2 ;
   lcd.setCursor(startPosition,1) ; 
   lcd.print(str2) ;
   delay(2000) ;
     }
     signal_app = 1 ;
    }
  }


}



void setup() {
  Serial.begin(9600) ;
  mySerial.begin(9600) ;
  SPI.begin() ;
  mfrc522.PCD_Init() ;
  myServo.attach(servo) ;
  lcd.init() ;
  lcd.backlight() ;
  init_stage() ;
}

void type_pass() {
   flag = 0 ;
   int count = 5 ; 
  int tryNumbers = 0 ;
  while(flag==0) {
    if(tryNumbers < 2) {
     current_pass("Enter PassWord") ;  
     if(signal_changepass == 1 || signal_typeapp == 1 || signal_typecard == 1) return ;
     delay(500) ;
     current_pass_wrong() ; 
     tryNumbers++ ; 
    }
    else {
      tryNumbers = 0 ; 
      count = 5 ;
     while(count >= 0) {
     time_lock(count) ; 
     count-- ;
     }
    }
  } 
  delay(500) ;
  open_door() ;
  init_stage() ;
}


void loop() {
  // put your main code here, to run repeatedly:
  customKey = customKeypad.getKey() ; 
  if(customKey) {
    if(customKey == '#') {
      change_pass() ; 
      signal_changepass = 0;
    }
    else if(customKey == '*') {
        check_card() ;
        init_stage() ;
    }
    else if(customKey == 'A') {
      open_door_byapp() ;
      init_stage() ;
    }
    else {
      type_pass() ; 
       signal_changepass = 0;
       signal_typecard = 0 ;
       signal_typeapp = 0 ; 
    }
  }
  

}


